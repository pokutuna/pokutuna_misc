//Math
import scala.math._
1 + 1 //2 
2 - 1 //1
3 * 3 //9
5 / 2 //2

//Math.sqrt(81.0) deprecated
sqrt(64.0) //square root
pow(2,2) //square
pow(2,3) //cube
pow(2, 1/3.0) //cube root

pow(2,10) //1024
random // 0.0 <= math.random < 1.0

sin(360.0)
sin(0) //0
sin(Pi / 2.0) //1.0
sin(Pi * 3 / 2.0) //-1.0
sin(Pi) //1.2246467991473532E-16 not zero
cos(0) //1.0
cos(Pi) //-1.0
cos(Pi * 2) //1.0
cos(Pi / 2.0) //6.123233995736766E-17 not zero
tan(Pi / 4.0) //0.9999999999999999 not 1

def fact(n:BigInt):BigInt = {
  if(n <= 1) 1 else n * fact(n-1)
}
//fact(10000) stackOverFlow

def factTailRecursive(n:BigInt):BigInt = {
  def calc(num:BigInt, a:BigInt):BigInt = {
    if(a <= 1) num else calc(num*a, a-1)
  }
  calc(n, n-1)
}
factTailRecursive(10000)
//40238726007709377354370243392300398571937486421071463254379991042993851239862902059204420848696940480047998861019719605863166687299480855890132382966994459099742450408707375991882362772718873251977950595099527612087497546249704360141827809464649629105639388743788648733711918104582578364784997701247663288983595573543251318532395846307555740911426241747434934755342864657661166779739666882029120737914385371958824980812686783837455973174613608537953452422158659320192809087829730843139284440328123155861103697680135730421616874760967587134831202547858932076716913244842623613141250878020800026168315102734182797770478463586817016436502415369139828126481021309276124489635992870511496497541990934222156683257208082133318611681155361583654698404670897560290095053761647584772842188967...

assert(fact(10) == factTailRecursive(10)) //出力なし=>たぶんあってる

def inverse(n:Double):Double = 1.0/n
inverse(100) //0.01
inverse(1.0/2.0) //2.0

//divmod的なの無い…
def divmod(a:Int, b:Int):(Int,Int) = (a/b, a%b)
divmod(10,3)


signum(0.2) //1.0
signum(-3.0) //-1.0

